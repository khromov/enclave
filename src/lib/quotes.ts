export const quotes = [
	"Svelte 5 runes are symbols with $ prefix that control the Svelte compiler - they're keywords, not functions, so no imports needed!",
	"Svelte's $state() creates reactive state that automatically triggers UI updates when changed",
	"Svelte's $derived() creates computed values that update automatically when their dependencies change",
	"Svelte's $effect() runs side effects when state updates, but only in the browser - never during SSR",
	"Svelte runes can't be assigned to variables or passed as arguments because they're compiler keywords",
	'In Svelte 5, arrays and objects become deeply reactive proxies with $state(), so you can mutate nested properties',
	"Svelte gotcha: destructuring breaks reactivity - let { done } = todos[0] won't update when todos[0].done changes",
	"Svelte's $state.raw() creates non-reactive state for performance - can only be reassigned, never mutated",
	"Svelte's $state.snapshot() takes a static snapshot of reactive state, converting proxies to plain objects",
	"Svelte's $derived.by(() => ...) lets you write complex derivations that don't fit in a short expression",
	"Svelte's $effect.pre() runs before DOM updates, while regular $effect() runs after",
	"Svelte 5's $bindable() allows two-way data flow between parent and child components",
	"Svelte's $inspect() is like console.log but only works in development and automatically re-runs when values change",
	'Svelte 5 snippets replace slots from Svelte 4 and can be passed as props or declared inline',
	"Svelte's {@render snippet()} renders snippets with optional parameters",
	"In Svelte components, content inside component tags automatically becomes the 'children' snippet",
	'Svelte 5 error boundaries with <svelte:boundary> can catch rendering errors and show fallback UI',
	"Svelte 5 lets you use 'await' directly in templates, inside $derived(), and at the top level of <script>",
	'All Svelte component <style> CSS is scoped by default using hash-based classes',
	"Svelte's :global() lets you write global CSS that affects elements outside the component",
	"Svelte components accept custom CSS properties like --track-color='black' as props",
	'Svelte transitions with transition: create bidirectional animations that can reverse smoothly',
	'Svelte local transitions only play when their block changes, global transitions play when any parent changes',
	'Svelte keyed each blocks use (item.id) syntax for efficient list updates - Svelte intelligently moves items',
	"Svelte's animate: directive creates smooth animations when keyed each block items are reordered",
	'Svelte actions with use: are functions that run when elements mount (Svelte 5.29+ recommends attachments instead)',
	'Svelte stores are less needed in Svelte 5 - you can use runes in .svelte.js files for shared state',
	"Svelte's Context API prevents prop drilling and is automatically scoped to prevent SSR data leaks",
	"Svelte's onMount() runs after component mounts and can return a cleanup function for onDestroy()",
	"Svelte's tick() returns a Promise that resolves after all pending state changes are applied to the DOM",
	"Svelte has excellent TypeScript support with lang='ts' in script tags, plus full component generics",
	'Svelte 5 classes can use $state in field declarations: class Todo { done = $state(false); }',
	"Svelte gotcha: method binding loses 'this' context - use arrow functions or inline functions instead",
	"In Svelte modules, you can't export reassignable state - export objects with properties instead",
	"Svelte custom elements can be created with <svelte:options customElement='my-element' />",
	"Svelte's $host() rune provides access to the host element when compiling as a custom element",
	'Svelte uses event delegation for common events like click, keydown for better performance',
	"Svelte's bind:this gets DOM node references, while bind:property creates two-way data binding",
	'All Svelte 5 components are compiled to run in both legacy and runes mode automatically'
];

export function getRandomQuote(): string {
	return quotes[Math.floor(Math.random() * quotes.length)];
}
